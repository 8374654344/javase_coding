class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class CustomLinkedList {
    Node head;

    CustomLinkedList() {
        this.head = null;
    }

    // Method to add a new node to the end of the LinkedList
    public void append(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
    }

    // Method to swap adjacent values except the first value
    public void swapAdjacentValuesExceptFirst() {
        if (head == null || head.next == null) {
            // The LinkedList is empty or has only one node, no swapping needed
            return;
        }

        Node prev = head;
        Node current = head.next;

        // Swap the first pair of nodes
        prev.next = current.next;
        current.next = prev;
        head = current;

        // Continue swapping the remaining pairs
        while (prev.next != null && prev.next.next != null) {
            Node first = prev.next;
            Node second = prev.next.next;

            first.next = second.next;
            second.next = first;
            prev.next = second;

            prev = first;
        }
    }

    // Method to print the LinkedList
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data);
            if (current.next != null) {
                System.out.print(" > ");
            }
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        CustomLinkedList list = new CustomLinkedList();
        list.append(1);
        list.append(2);
        list.append(3);
        list.append(4);
        list.append(5);

        System.out.println("Original LinkedList:");
        list.printList();

        list.swapAdjacentValuesExceptFirst();

        System.out.println("LinkedList after swapping adjacent values except the first:");
        list.printList();
    }
}
